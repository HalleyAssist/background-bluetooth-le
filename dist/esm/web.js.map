{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { PluginListenerHandle, WebPlugin } from '@capacitor/core';\n\nimport { Preferences } from '@capacitor/preferences';\nimport {\n  AddDevicesOptions,\n  BackgroundBLEPlugin,\n  Config,\n  Device,\n  Devices,\n  DevicesChangedListener,\n  PermissionStatus,\n  RunningResult,\n  ScanConfig,\n  ScanMode,\n  SetConfigOptions,\n  StartStopResult,\n  UserStoppedResult,\n} from './definitions';\n\nconst DEVICES_KEY = 'backgroundble.devices';\nconst CONFIG_KEY = 'backgroundble.config';\nconst RUNNING_KEY = 'backgroundble.running';\nconst STOPPED_KEY = 'backgroundble.stopped';\n\nexport class BackgroundBLEWeb extends WebPlugin implements BackgroundBLEPlugin {\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { bluetooth: 'denied', notifications: 'denied' };\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { bluetooth: 'denied', notifications: 'denied' };\n  }\n\n  async initialise(): Promise<void> {\n    return;\n  }\n\n  async enable(): Promise<void> {\n    return;\n  }\n\n  async getDevices(): Promise<Devices> {\n    const devices = await Preferences.get({ key: DEVICES_KEY });\n    if (devices && devices.value) {\n      return { devices: JSON.parse(devices.value) };\n    }\n    return { devices: [] };\n  }\n\n  async setDevices(_options: AddDevicesOptions): Promise<Devices> {\n    await Preferences.set({ key: DEVICES_KEY, value: JSON.stringify(_options.devices) });\n    return { devices: _options.devices as Device[] };\n  }\n\n  async clearDevices(): Promise<Devices> {\n    return this.setDevices({ devices: [] });\n  }\n\n  async startForegroundService(): Promise<StartStopResult> {\n    await Preferences.set({ key: RUNNING_KEY, value: 'true' });\n    return { result: 'started' };\n  }\n\n  async stopForegroundService(): Promise<StartStopResult> {\n    await Preferences.set({ key: RUNNING_KEY, value: 'false' });\n    return { result: 'stopped' };\n  }\n\n  async isRunning(): Promise<RunningResult> {\n    const running = await Preferences.get({ key: RUNNING_KEY });\n    return { running: running.value === 'true' };\n  }\n\n  async didUserStop(): Promise<UserStoppedResult> {\n    const stopped = await Preferences.get({ key: STOPPED_KEY });\n    return { userStopped: stopped.value === 'true' };\n  }\n\n  async getActiveDevice(): Promise<{ device: Device | null }> {\n    const device = await Preferences.get({ key: 'backgroundble.activeDevice' });\n    if (device && device.value) {\n      return { device: JSON.parse(device.value) as Device };\n    }\n    return { device: null };\n  }\n\n  async setActiveDevice(_device: Device | null): Promise<void> {\n    await Preferences.set({ key: 'backgroundble.activeDevice', value: JSON.stringify(_device) });\n  }\n\n  async setConfig(options: SetConfigOptions): Promise<Config> {\n    await Preferences.set({ key: CONFIG_KEY, value: JSON.stringify(options.config) });\n    return { config: options.config as ScanConfig };\n  }\n\n  async getConfig(): Promise<Config> {\n    const storedConfig = await Preferences.get({ key: CONFIG_KEY });\n    const config = storedConfig.value ? (JSON.parse(storedConfig.value) as ScanConfig) : null;\n    if (config) {\n      return { config };\n    } else {\n      return this.setConfig({\n        config: {\n          mode: ScanMode.OPPORTUNISTIC,\n          debug: false,\n          deviceTimeout: 30000,\n          threshold: -100,\n        },\n      });\n    }\n  }\n\n  addListener(\n    _eventName: 'devicesChanged' | 'closeDevicesChanged',\n    _event: DevicesChangedListener,\n  ): Promise<PluginListenerHandle> {\n    return Promise.resolve({\n      remove: () => Promise.resolve(),\n    });\n  }\n}\n"]}