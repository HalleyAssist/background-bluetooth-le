{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EAQL,QAAQ,GAET,MAAM,eAAe,CAAC;AAEvB,MAAM,OAAO,gBAAiB,SAAQ,SAAS;IAC7C,KAAK,CAAC,gBAAgB;QACpB,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC;IAC1D,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC;IAC1D,CAAC;IAED,KAAK,CAAC,UAAU;QACd,OAAO;IACT,CAAC;IAED,KAAK,CAAC,UAAU;QACd,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,QAAkB;QACjC,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,QAA0B;QACxC,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,QAA2B;QAC1C,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,QAA6B;QAC9C,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,qBAAqB;QACzB,OAAO;IACT,CAAC;IAED,KAAK,CAAC,SAAS;QACb,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAA4B;QAC5C,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,aAAa,EAAE,CAAC;IAC5C,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport {\n  AddDeviceOptions,\n  AddDevicesOptions,\n  BackgroundBLEPlugin,\n  Device,\n  PermissionStatus,\n  RemoveDeviceOptions,\n  Result,\n  ScanMode,\n  SetScanModeOptions,\n} from './definitions';\n\nexport class BackgroundBLEWeb extends WebPlugin implements BackgroundBLEPlugin {\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { bluetooth: 'denied', notifications: 'denied' };\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { bluetooth: 'denied', notifications: 'denied' };\n  }\n\n  async initialise(): Promise<void> {\n    return;\n  }\n\n  async getDevices(): Promise<Result<'devices', Device[]>> {\n    return { devices: [] };\n  }\n\n  async setDevices(_devices: Device[]): Promise<Result<'devices', Device[]>> {\n    return { devices: [] };\n  }\n\n  async addDevice(_options: AddDeviceOptions): Promise<Result<'devices', Device[]>> {\n    return { devices: [] };\n  }\n\n  async addDevices(_options: AddDevicesOptions): Promise<Result<'devices', Device[]>> {\n    return { devices: [] };\n  }\n\n  async removeDevice(_options: RemoveDeviceOptions): Promise<Result<'devices', Device[]>> {\n    return { devices: [] };\n  }\n\n  async clearDevices(): Promise<Result<'devices', Device[]>> {\n    return { devices: [] };\n  }\n\n  async startForegroundService(): Promise<Result<'result', string>> {\n    return { result: 'not supported' };\n  }\n\n  async stopForegroundService(): Promise<void> {\n    return;\n  }\n\n  async isRunning(): Promise<Result<'running', boolean>> {\n    return { running: false };\n  }\n\n  async setScanMode(_options: SetScanModeOptions): Promise<Result<'result', ScanMode>> {\n    return { result: ScanMode.OPPORTUNISTIC };\n  }\n}\n"]}